from tkinter import*
from tkinter import ttk
from PIL import Image, ImageTk
import mysql.connector
from tkinter import messagebox

class Employee:
    def __init__(self,root):
        self.root=root
        self.root.geometry("1530x790+0+0")
        self.root.title("Employee Management System")

        #Variables
        self.var_dep=StringVar()
        self.var_name=StringVar()
        self.var_designition=StringVar()
        self.var_email=StringVar()
        self.var_address=StringVar()
        self.var_married=StringVar()
        self.var_dob=StringVar()
        self.var_doj=StringVar()
        self.var_cnic=StringVar()
        self.var_gender=StringVar()
        self.var_phone=StringVar()
        self.var_city=StringVar()
        self.var_salary=StringVar()
        self.var_id=StringVar()


        lbl_title=Label(self.root,text="EMPLOYEE MANAGEMENT SYSTEM",font=('times new roman',37,'bold'),fg='darkblue',bg='white')
        lbl_title.place(x=0,y=0,width=1530,height=50)

        #logo
        img_logo=Image.open('images/side.jpg')
        img_logo=img_logo.resize((50,50))
        self.photo_logo=ImageTk.PhotoImage(img_logo)

        self.logo=Label(self.root,image=self.photo_logo)
        self.logo.place(x=270,y=0,width=50,height=50)

         #image frame
        img_frame=Frame(self.root,bd=2,relief=RIDGE,bg='white')
        img_frame.place(x=0,y=50,width=1530,height=160)

        #1st image
        img1=Image.open('images/OIP.jpg')
        img1=img1.resize((540,160))
        self.photo1=ImageTk.PhotoImage(img1)

        self.img_1=Label(img_frame,image=self.photo1)
        self.img_1.place(x=0,y=0,width=540,height=160)

        #2nd image
        img2=Image.open('images/1.jpg')
        img2=img2.resize((540,160))
        self.photo2=ImageTk.PhotoImage(img2)

        self.img_2=Label(img_frame,image=self.photo2)
        self.img_2.place(x=1040,y=0,width=500,height=160)

        #3rd image
        img3=Image.open('images/2.webp')
        img3=img3.resize((540,160))
        self.photo3=ImageTk.PhotoImage(img3)

        self.img_3=Label(img_frame,image=self.photo3)
        self.img_3.place(x=540,y=0,width=500,height=160)

         #Main Frame
        Main_frame=Frame(self.root,bd=3,relief=RIDGE,bg='white')
        Main_frame.place(x=10,y=220,width=1500,height=560)

        #Upper Frame
        upper_frame=LabelFrame(Main_frame,bd=2,relief=RIDGE,bg='white',text='Employee Information',font=('times new roman',11,'bold'),fg='red')
        upper_frame.place(x=10,y=10,width=1480,height=270)

        #Labels and Entry Fields
        lbl_dep=Label(upper_frame,text='Department',font=('arial',12,'bold'),bg='white')
        lbl_dep.grid(row=0,column=0,padx=2,sticky=W)

        #Department Selection
        combo_dep=ttk.Combobox(upper_frame,textvariable=self.var_dep,font=('arial',11,'bold'),width=17,state='readonly')
        combo_dep['value']=('Select Department','Marketing','Operations', 'IT','Research & Development','HR','Accounting')
        combo_dep.current(0)
        combo_dep.grid(row=0,column=1,padx=2,pady=10,sticky=W)

        #Down Frame
        down_frame=LabelFrame(Main_frame,bd=2,relief=RIDGE,bg='white',text='Employee Information Table',font=('times new roman',11,'bold'),fg='red')
        down_frame.place(x=10,y=280,width=1480,height=270)

         #Name
        lbl_Name=Label(upper_frame,font=('arial',12,'bold'),text="Name:",bg='white')
        lbl_Name.grid(row=0,column=2,sticky=W,padx=2,pady=7)

        txt_name=ttk.Entry(upper_frame,textvariable=self.var_name,width=22,font=('arial',11,'bold'))
        txt_name.grid(row=0,column=3,padx=2,pady=7)

        #Label Desginition
        lbl_Designition=Label(upper_frame,font=('arial',12,'bold'),text="Designition:",bg='white')
        lbl_Designition.grid(row=1,column=0,sticky=W,padx=2,pady=7)

        txt_Designition=ttk.Entry(upper_frame,textvariable=self.var_designition,width=22,font=('arial',11,'bold'))
        txt_Designition.grid(row=1,column=1,sticky=W, padx=2,pady=7)

        #Email
        lbl_email=Label(upper_frame,font=('arial',12,'bold'),text="Email:",bg='white')
        lbl_email.grid(row=1,column=2,sticky=W,padx=2,pady=7)

        txt_email=ttk.Entry(upper_frame,textvariable=self.var_email,width=22,font=('arial',11,'bold'))
        txt_email.grid(row=1,column=3,padx=2,pady=7)

         #Address
        lbl_address=Label(upper_frame,font=('arial',12,'bold'),text="Address:",bg='white')
        lbl_address.grid(row=2,column=0,sticky=W,padx=2,pady=7)

        txt_address=ttk.Entry(upper_frame,textvariable=self.var_address,width=22,font=('arial',11,'bold'))
        txt_address.grid(row=2,column=1,padx=2,pady=7)

         #Married
        lbl_married_status=Label(upper_frame,font=('arial',12,'bold'),text="Married Status:",bg='white')
        lbl_married_status.grid(row=2,column=2,sticky=W,padx=2,pady=7)

        com_txt_married=ttk.Combobox(upper_frame,textvariable=self.var_married,state='readonly',font=('arial',12,'bold'),width=18)
        com_txt_married['value']=("Select Status","Married","Unmarried")
        com_txt_married.current(0)
        com_txt_married.grid(row=2,column=3,sticky=W,padx=2,pady=7)

        #Date of Birth
        lbl_dob=Label(upper_frame,font=('arial',12,'bold'),text="Date of Birth:",bg='white')
        lbl_dob.grid(row=3,column=0,sticky=W,padx=2,pady=7)

        txt_dob=ttk.Entry(upper_frame,textvariable=self.var_dob,width=22,font=('arial',11,'bold'))
        txt_dob.grid(row=3,column=1,padx=2,pady=7)

        #Date of Joining
        lbl_doj=Label(upper_frame,font=('arial',12,'bold'),text="Date of Joining:",bg='white')
        lbl_doj.grid(row=3,column=2,sticky=W,padx=2,pady=7)

        txt_doj=ttk.Entry(upper_frame,textvariable=self.var_doj,width=22,font=('arial',11,'bold'))
        txt_doj.grid(row=3,column=3,padx=2,pady=7)

        #CNIC
        lbl_cnic=Label(upper_frame,font=('arial',12,'bold'),text="CNIC:",bg='white')
        lbl_cnic.grid(row=4,column=0,sticky=W,padx=2,pady=7)

        txt_cnic=ttk.Entry(upper_frame,textvariable=self.var_cnic,width=22,font=('arial',11,'bold'))
        txt_cnic.grid(row=4,column=1,padx=2,pady=7)

        #Gender
        lbl_gender=Label(upper_frame,font=('arial',12,'bold'),text="Gender:",bg='white')
        lbl_gender.grid(row=4,column=2,sticky=W,padx=2,pady=7)

        com_txt_gender=ttk.Combobox(upper_frame,textvariable=self.var_gender,state='readonly',font=('arial',12,'bold'),width=18)

        com_txt_gender['value']=('Select Gender',"Male",'Female','Other')
        com_txt_gender.current(0)
        com_txt_gender.grid(row=4,column=3,sticky=W,padx=2,pady=7)

        #Phone Number
        lbl_phone=Label(upper_frame,font=('arial',12,'bold'),text="Phone Number:",bg='white')
        lbl_phone.grid(row=0,column=4,sticky=W,padx=2,pady=7)

        txt_phone=ttk.Entry(upper_frame,textvariable=self.var_phone,width=22,font=('arial',11,'bold'))
        txt_phone.grid(row=0,column=5,padx=2,pady=7)

         #City
        lbl_city=Label(upper_frame,font=('arial',12,'bold'),text="City:",bg='white')
        lbl_city.grid(row=1,column=4,sticky=W,padx=2,pady=7)

        txt_city=ttk.Entry(upper_frame,textvariable=self.var_city,width=22,font=('arial',11,'bold'))
        txt_city.grid(row=1,column=5,padx=2,pady=7)

        #Salary
        lbl_salary=Label(upper_frame,font=('arial',12,'bold'),text="Salary:",bg='white')
        lbl_salary.grid(row=2,column=4,sticky=W,padx=2,pady=7)

        txt_salary=ttk.Entry(upper_frame,textvariable=self.var_salary,width=22,font=('arial',11,'bold'))
        txt_salary.grid(row=2,column=5,padx=2,pady=7)

        #Employee_id
        lbl_employee_id=Label(upper_frame,font=('arial',12,'bold'),text="Employee ID:",bg='white')
        lbl_employee_id.grid(row=3,column=4,sticky=W,padx=2,pady=7)

        txt_employee_id=ttk.Entry(upper_frame,textvariable=self.var_id,width=22,font=('arial',11,'bold'))
        txt_employee_id.grid(row=3,column=5,padx=2,pady=7)

        #side image
        img_side=Image.open('images/side.jpg')
        img_side=img_side.resize((220,220))
        self.photo_side=ImageTk.PhotoImage(img_side)

        self.img_side=Label(upper_frame,image=self.photo_side)
        self.img_side.place(x=1000,y=0,width=220,height=220)

         #Button Frame
        button_frame=Frame(upper_frame,bd=2,relief=RIDGE,bg='white')
        button_frame.place(x=1290,y=10,width=170,height=210)
        
        btn_add=Button(button_frame,text="Save",command=self.add_data,font=('arial',15,'bold'),width=13,bg='blue',fg='white')
        btn_add.grid(row=0,column=0,padx=1,pady=5)

        btn_update=Button(button_frame,text="Update",command=self.update_data,font=('arial',15,'bold'),width=13,bg='blue',fg='white')
        btn_update.grid(row=1,column=0,padx=1,pady=5)

        btn_delete=Button(button_frame,text="Delete",command=self.delete_data,font=('arial',15,'bold'),width=13,bg='blue',fg='white')
        btn_delete.grid(row=2,column=0,padx=1,pady=5)

        btn_clear=Button(button_frame,text="Clear",command=self.reset_data,font=('arial',15,'bold'),width=13,bg='blue',fg='white')
        btn_clear.grid(row=3,column=0,padx=1,pady=5)

        #Search Frame
        search_frame=LabelFrame(down_frame,bd=2,relief=RIDGE,bg='white',text='Search Employee Information',font=('times new roman',11,'bold'),fg='red')
        search_frame.place(x=0,y=0,width=1470,height=60)
        
        search_by=Label(search_frame,font=('arial',11,'bold'),text='Search By:',fg='white',bg='blue')
        search_by.grid(row=0,column=0,sticky=W,padx=5)

         #search
        self.var_com_search=StringVar()
        com_txt_search=ttk.Combobox(search_frame,textvariable=self.var_com_search,state='readonly',font=('arial',12,'bold'),width=18)
        com_txt_search['value']=('Select Option','Phone','CNIC')
        com_txt_search.current(0)
        com_txt_search.grid(row=0,column=1,sticky=W,padx=5)

        self.var_search=StringVar()
        txt_search=ttk.Entry(search_frame,textvariable=self.var_search,width=22,font=('arial',11,'bold'))
        txt_search.grid(row=0,column=2,padx=5)

        btn_search=Button(search_frame,text='Search',command=self.search_data,font=('arial',11,'bold'),width=14,bg='blue',fg='white')
        btn_search.grid(row=0,column=3,padx=5)

        btn_ShowAll=Button(search_frame,text="Show All",command=self.fetch_data,font=('arial',11,'bold'),width=14,bg='blue',fg='white')
        btn_ShowAll.grid(row=0,column=4,padx=5)

        message=Label(search_frame,text='Drive innovation and creativity',font=('times new roman',27,'bold'),fg='red',bg='white')
        message.place(x=800,y=0,width=600,height=30)

        img_small_logo=Image.open(r'images/small logo.webp')
        img_small_logo=img_small_logo.resize((60,50))
        self.photoimg_small_logo=ImageTk.PhotoImage(img_small_logo)

        self.logo=Label(search_frame,image=self.photoimg_small_logo)
        self.logo.place(x=800,y=1,width=50,height=43)

        #*************Employee Table***************
        #Table Frame
        table_frame=Frame(down_frame,bd=3,relief=RIDGE)
        table_frame.place(x=0,y=60,width=1470,height=170)

        scroll_x=ttk.Scrollbar(table_frame,orient=HORIZONTAL)
        scroll_y=ttk.Scrollbar(table_frame,orient=VERTICAL)

        self.employee_table=ttk.Treeview(table_frame,column=("dep",'name','degi','email','address','married','dob','doj','cnic','gender','phone','city','salary','id',),xscrollcommand=scroll_x.set,yscrollcommand=scroll_y.set)

        scroll_x.pack(side=BOTTOM,fill=X)
        scroll_y.pack(side=RIGHT,fill=Y)

        scroll_x.config(command=self.employee_table.xview)
        scroll_y.config(command=self.employee_table.yview)

        self.employee_table.heading('dep',text="Department")
        self.employee_table.heading('name',text="Name")
        self.employee_table.heading('degi',text="Designition")
        self.employee_table.heading('email',text="Email")
        self.employee_table.heading('address',text="Address")
        self.employee_table.heading('married',text="Married Status")
        self.employee_table.heading('dob',text="Date of Birth")
        self.employee_table.heading('doj',text="Date of Joining")
        self.employee_table.heading('cnic',text="CNIC")
        self.employee_table.heading('gender',text="Gender")
        self.employee_table.heading('phone',text="Phone Number")
        self.employee_table.heading('city',text="City")
        self.employee_table.heading('salary',text="Salary")
        self.employee_table.heading('id',text="Employee ID")

        self.employee_table['show']='headings'

        self.employee_table.column('dep',width=150)
        self.employee_table.column('name',width=150)
        self.employee_table.column('degi',width=150)
        self.employee_table.column('email',width=150)
        self.employee_table.column('address',width=150)
        self.employee_table.column('married',width=150)
        self.employee_table.column('dob',width=150)
        self.employee_table.column('doj',width=150)
        self.employee_table.column('cnic',width=150)
        self.employee_table.column('gender',width=150)
        self.employee_table.column('phone',width=150)
        self.employee_table.column('city',width=150)
        self.employee_table.column('salary',width=150)
        self.employee_table.column('id',width=150)

        self.employee_table.pack(fill=BOTH,expand=1)
        self.employee_table.bind("<ButtonRelease>",self.get_cursor)

        self.fetch_data()

        # ************Declaring Functions*****************
    
    def add_data(self):
        if self.var_dep.get() == '' or self.var_email.get() == '' or self.var_id.get() == '':
            messagebox.showerror('Error','All Fields are required')
        else:
            try:
                conn=mysql.connector.connect(host='localhost',database='mydata',user='root',password='Thisisfawad@0')
                my_cursor=conn.cursor()
                my_cursor.execute('Insert into employee1 values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)',(
                                                                                                                self.var_dep.get(),
                                                                                                                self.var_name.get(),
                                                                                                                self.var_designition.get(),
                                                                                                                self.var_email.get(),
                                                                                                                self.var_address.get(),
                                                                                                                self.var_married.get(),
                                                                                                                self.var_dob.get(),
                                                                                                                self.var_doj.get(),
                                                                                                                self.var_cnic.get(),
                                                                                                                self.var_gender.get(),
                                                                                                                self.var_phone.get(),
                                                                                                                self.var_city.get(),
                                                                                                                self.var_salary.get(),
                                                                                                                self.var_id.get()

                                                                                                                ))
                
                conn.commit()
                self.fetch_data()
                conn.close()
                messagebox.showinfo("Success",'Employee has been added!',parent=self.root)
            except Exception as es:
                messagebox.showerror('Error',f'Due To:{str(es)}',parent=self.root)


    #fetch Data
    def fetch_data(self):
         conn=mysql.connector.connect(host='localhost',database='mydata',user='root',password='Thisisfawad@0')
         my_cursor=conn.cursor()
         my_cursor.execute('Select * from employee1')
         data=my_cursor.fetchall()
         if len(data) != 0:
            self.employee_table.delete(*self.employee_table.get_children())
            for i in data:
                self.employee_table.insert("",END,values=i)
            conn.commit()
         conn.close()

    #Get Cursor
    def get_cursor(self,event=''):
        cursor_row=self.employee_table.focus()
        content=self.employee_table.item(cursor_row)
        data=content['values']

        self.var_dep.set(data[0])
        self.var_name.set(data[1])
        self.var_designition.set(data[2])
        self.var_email.set(data[3])
        self.var_address.set(data[4])
        self.var_married.set(data[5])
        self.var_dob.set(data[6])
        self.var_doj.set(data[7])
        self.var_cnic.set(data[8])
        self.var_gender.set(data[9])
        self.var_phone.set(data[10])
        self.var_city.set(data[11])
        self.var_salary.set(data[12])
        self.var_id.set(data[13])

    #Update data
    def update_data(self):
        if self.var_dep.get() == '' or self.var_email.get() == '' or self.var_id.get() == '':
            messagebox.showerror('Error','All Fields are required')
        else:
            try:
                update=messagebox.askyesno("Update", "Are you sure to update this employee data")
                if update>0:
                    conn=mysql.connector.connect(host='localhost',database='mydata',user='root',password='Thisisfawad@0')
                    my_cursor=conn.cursor()
                    my_cursor.execute('update employee1 set Department =%s,Name=%s,Designition=%s,Email=%s,Address=%s,Married_status=%s,DOB=%s, DOJ=%s,Gender=%s,Phone=%s,City=%s,Salary=%s,ID=%s where CNIC=%s',(
                                                                                                                                                                                                                self.var_dep.get(),
                                                                                                                                                                                                                self.var_name.get(),
                                                                                                                                                                                                                self.var_designition.get(),
                                                                                                                                                                                                                self.var_email.get(),
                                                                                                                                                                                                                self.var_address.get(),
                                                                                                                                                                                                                self.var_married.get(),
                                                                                                                                                                                                                self.var_dob.get(),
                                                                                                                                                                                                                self.var_doj.get(),
                                                                                                                                                                                                                self.var_gender.get(),
                                                                                                                                                                                                                self.var_phone.get(),
                                                                                                                                                                                                                self.var_city.get(),
                                                                                                                                                                                                                self.var_salary.get(),
                                                                                                                                                                                                                self.var_id.get(),
                                                                                                                                                                                                                self.var_cnic.get()

                                                                                                                                                                                                                        ))
                    
                
                else:
                    if not update:
                        return
                conn.commit()
                self.fetch_data()
                conn.close()
                messagebox.showinfo("Success", "Employee Successfully Updated", parent=self.root)
            except Exception as es:
                messagebox.showerror("Error",f"Due To: {str(es)}",parent=self.root)


    #Delete Function
    def delete_data(self):
        if self.var_cnic.get()=="":
            messagebox.showerror("Error", "All fields are required")
        else:
            try:
                Delete=messagebox.askyesno("Delete",'Are you sure to delete this employee')
                if Delete>0:
                   conn=mysql.connector.connect(host='localhost',database='mydata',user='root',password='Thisisfawad@0')
                   my_cursor=conn.cursor() 
                   sql='delete from employee1 where cnic=%s'
                   value=(self.var_cnic.get(),)
                   my_cursor.execute(sql,value)
                else:
                    if not Delete:
                        return
                conn.commit()
                self.fetch_data()
                conn.close()
            except Exception as es:
                messagebox.showinfo("Delete", "Employee Successfully Deleted", parent=self.root)
            except Exception as es:
                messagebox.showerror("Error",f"Due To: {str(es)}",parent=self.root)


    #reset
    def reset_data(self):
        self.var_dep.set("Select Department")
        self.var_name.set("")
        self.var_designition.set("")
        self.var_email.set("")
        self.var_address.set("")
        self.var_married.set("Select Status")
        self.var_dob.set("")
        self.var_doj.set("")
        self.var_cnic.set("")
        self.var_gender.set("Select Gender")
        self.var_phone.set("")
        self.var_city.set("")
        self.var_salary.set("")
        self.var_id.set("")


    #Search
    def search_data(self):
        if self.var_com_search.get() == "" or self.var_search.get() == "":
            messagebox.showerror("Error",'Please select option')
        else:
            try:
                conn=mysql.connector.connect(host='localhost',database='mydata',user='root',password='Thisisfawad@0')
                my_cursor=conn.cursor()
                my_cursor.execute('select * from employee1 where ' +str(self.var_com_search.get()) + " LIKE'%" + str(self.var_search.get() + "%'"))
                rows=my_cursor.fetchall()
                if len(rows)!=0:
                    self.employee_table.delete(*self.employee_table.get_children())
                    for i in rows:
                        self.employee_table.insert("",END,values=i)
                conn.commit()
                conn.close()
            except Exception as es:
                messagebox.showerror("Error",f'Due To:{str(es)}',parent=self.root)


if __name__ == "__main__":
    root=Tk()
    obj=Employee(root)
    root.mainloop()
